From 082586176e31a611192648bfd367873fd7bc444a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E5=AD=99=E5=B8=85240108?= <2922139828@xiaomi.com>
Date: Fri, 7 Jun 2024 16:38:26 +0800
Subject: [PATCH] microxrce_agent

---
 fileInfo.h                                    |   5 +
 microxrce_agent.cpp                           | 202 +++++++++++++++++-
 .../middleware/fastdds/FastDDSMiddleware.cpp  |  66 +++++-
 src/cpp/middleware/fastdds/student.c          |  75 +++++++
 src/cpp/middleware/fastdds/student.h          |  58 +++++
 student.c                                     |  75 +++++++
 student.h                                     |  58 +++++
 student.idl                                   |   6 +
 student23.h                                   |   8 +
 9 files changed, 549 insertions(+), 4 deletions(-)
 create mode 100644 fileInfo.h
 create mode 100644 src/cpp/middleware/fastdds/student.c
 create mode 100644 src/cpp/middleware/fastdds/student.h
 create mode 100644 student.c
 create mode 100644 student.h
 create mode 100644 student.idl
 create mode 100644 student23.h

diff --git a/fileInfo.h b/fileInfo.h
new file mode 100644
index 0000000..05a7e80
--- /dev/null
+++ b/fileInfo.h
@@ -0,0 +1,5 @@
+struct fileInfo
+{
+    string filename;
+    unsigned long long timestamp;
+};
diff --git a/microxrce_agent.cpp b/microxrce_agent.cpp
index e4fc766..a0637f4 100644
--- a/microxrce_agent.cpp
+++ b/microxrce_agent.cpp
@@ -13,9 +13,206 @@
 // limitations under the License.
 
 #include <uxr/agent/AgentInstance.hpp>
+//#include"student.h"
+#include"student23.h"
+#include <iostream>
+#include <cstdio>
+#include <cstdlib>
+#include <cerrno>
+#include <cstring>
+#include <sys/socket.h>
+#include <sys/types.h>
+#include <netinet/in.h>
+#include <unistd.h>
+#include <arpa/inet.h>
+#include <sys/select.h>
+#include <fstream>
+#include <chrono>
+#include <vector>
+#include <thread>
+#include <algorithm>
+#include "fileInfo.h"
+#include<mutex>
+#define MAX_CLIENTS 2
+
+using namespace std;
+mutex studentsMutex;
+student deserializeStudent(const char* buffer) {//反序列化
+    student student;
+    char name[50], hobby1[30], hobby2[30], hobby3[30];
+    int fields = sscanf(buffer, "%29[^,],%ld,%ld,%29[^,],%29[^,],%29[^,]", name, &student.number, &student.grade, hobby1, hobby2, hobby3);
+    student.name = string(name);
+    student.hobby[0] = hobby1;
+    student.hobby[1] = hobby2;
+    student.hobby[2] = hobby3;
+    return student;
+}
+// 定义比较函数，按 student 的 number 成员排序
+bool compareByNumber(const student& a, const student& b) {
+    return a.number < b.number;
+}
+
+// 使用 sort 函数对 student 数组进行排序
+void sortStudent(std::vector<student>* current_students) {
+    sort(current_students->begin(), current_students->end(), compareByNumber);
+}
+void writeToFileAndSwitch(vector<student>* current_students) {
+    sort(current_students->begin(), current_students->end(), compareByNumber);
+    ofstream outfile;
+    auto now = chrono::system_clock::now();
+    auto now_c = chrono::system_clock::to_time_t(now);
+    tm* now_tm = localtime(&now_c);
+
+    char filename[30];
+    strftime(filename, 30, "%Y%m%d%H%M%S.txt", now_tm);
+
+    outfile.open(filename, ios::out);
+    if (!outfile.is_open()) {
+        cout << "Error opening file" << endl;
+        return;
+    }
+
+    for (const auto& student : *current_students) {
+        outfile << "Name: " << student.name << " Number: " << student.number << " Grade: " << student.grade << " Hobbies: ";
+        for (int j = 0; j < 3; j++) {
+            outfile << student.hobby[j] << " ";
+        }
+        outfile << endl;
+    }
+
+    outfile.close();
+
+    fileInfo file;
+    file.filename = filename;
+    file.timestamp = chrono::duration_cast<chrono::milliseconds>(now.time_since_epoch()).count();
+
+    ofstream fileinfoFile;
+    fileinfoFile.open("fileInfo.txt", ios::app);
+    if (!fileinfoFile.is_open()) {
+        cout << "Error opening fileInfo.txt" << endl;
+        return;
+    }
+
+    fileinfoFile << "Filename: " << file.filename << " Timestamp: " << file.timestamp << endl;
+    fileinfoFile.close();
+
+    current_students->clear();
+}
+
+
+void handleClientConnection(int client_socket) {
+    static int file_count = 1; // 文件计数器，用于生成文件名
+    static int i =1;
+    static vector<student> students1;
+    static vector<student> students2; 
+    static vector<student>* current_students = &students1;
+    while(true){
+        char buf[255];
+        int bytesReceived = recv(client_socket, buf, 255, 0);
+        if (bytesReceived == -1) {
+            cerr << "Error receiving data from client\n";
+            break;
+        } else if (bytesReceived == 0) {
+            cout << "Client disconnected\n";
+            break;
+        }
+
+        //memset(buf,0,255);
+        //recv(client_socket,buf,512,0);
+        //memset(&newstudent,0,sizeof(student));
+        //memcpy(&newstudent,buf,sizeof(student));
+        //student newstudent = deserializeStudent(buf);
+        //memset(&newstudent, 0, sizeof(student));
+        studentsMutex.lock();
+        
+        student newstudent = deserializeStudent(buf);
+        int read_size = read(client_socket, buf, sizeof(student));
+        if(newstudent.grade != 2 && newstudent.grade != 3) {
+            return;
+        }
+        //cout << "Received student information:" << endl;
+        cout <<"filecount:"<<file_count<<" ";
+        cout << "Name: " << newstudent.name << " ";
+        cout << "Number: " << newstudent.number << " ";
+        cout << "Grade: " << newstudent.grade << " ";
+        cout << "Hobbies: ";
+        for (int j = 0; j < 3; j++) {
+            cout << newstudent.hobby[j] << " ";
+        }
+        cout << endl;
+
+        if (read_size == 0) {
+            cout << "Client disconnected" << endl;
+            close(client_socket);
+        }
+        current_students->push_back(newstudent);
+        studentsMutex.unlock();
+        if (current_students->size() >= 1000) {
+            if (current_students == &students1) {
+                thread write_thread(writeToFileAndSwitch, &students1);
+                write_thread.detach();
+                current_students = &students2;
+            } else {
+                thread write_thread(writeToFileAndSwitch, &students2);
+                write_thread.detach();
+                current_students = &students1;
+            }
+        }
+    }
+    close(client_socket);
+}
+
+int startrec23() {
+    cout << "This is center" << endl;
+
+    // socket
+    int listenfd = socket(AF_INET, SOCK_STREAM, 0);
+    if (listenfd == -1) {
+        cout << "Error: socket" << endl;
+        return 0;
+    }
+
+    // bind
+    struct sockaddr_in addr;
+    addr.sin_family = AF_INET;
+    addr.sin_port = htons(8400);
+    addr.sin_addr.s_addr = INADDR_ANY;
+    if (bind(listenfd, (struct sockaddr*)&addr, sizeof(addr)) == -1) {
+        cout << "Error: bind" << endl;
+        return 0;
+    }
+
+    // listen for two clients
+    if (listen(listenfd, MAX_CLIENTS) == -1) {
+        cout << "Error: listen" << endl;
+        return 0;
+    }
+
+    fd_set fds;
+    int max_fd = listenfd;
+    int client_sockets[MAX_CLIENTS] = {0};
+
+        while (true) {
+        sockaddr_in clientAddr;
+        socklen_t clientAddrSize = sizeof(clientAddr);
+        int clientSocket = accept(listenfd, (struct sockaddr *)&clientAddr, &clientAddrSize);
+        if (clientSocket == -1) {
+            cerr << "Error accepting client connection\n";
+            continue;
+        }
+
+        thread clientThread(handleClientConnection, clientSocket);
+        clientThread.detach();
+    }
+
+    close(listenfd);
+
+    return 0;
+}
 
 int main(int argc, char** argv)
 {
+    thread thread23(startrec23);
     eprosima::uxr::AgentInstance& agent_instance = agent_instance.getInstance();
 
     if (!agent_instance.create(argc, argv))
@@ -23,6 +220,9 @@ int main(int argc, char** argv)
         return 1;
     }
     agent_instance.run();
-
+    thread23.join();
+    // std::vector<uint8_t> data;
+    // eprosima::uxr::FastDDSMiddleware writer;
+    // writer.write_data(0x01,&data);
     return 0;
 }
diff --git a/src/cpp/middleware/fastdds/FastDDSMiddleware.cpp b/src/cpp/middleware/fastdds/FastDDSMiddleware.cpp
index a383fb9..a757f47 100644
--- a/src/cpp/middleware/fastdds/FastDDSMiddleware.cpp
+++ b/src/cpp/middleware/fastdds/FastDDSMiddleware.cpp
@@ -21,6 +21,60 @@
 #include "../../xmlobjects/xmlobjects.h"
 
 #include <uxr/agent/middleware/utils/Callbacks.hpp>
+#include"student.h"
+
+#include <ucdr/microcdr.h>
+#include <string.h>
+
+bool student_serialize_topic(ucdrBuffer* writer, const student* topic)
+{
+    bool success = true;
+
+        success &= ucdr_serialize_string(writer, topic->name);
+
+        success &= ucdr_serialize_int32_t(writer, topic->number);
+
+        success &= ucdr_serialize_int32_t(writer, topic->grade);
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            success &= ucdr_serialize_string(writer, topic->hobby[i]);
+        }
+    return success && !writer->error;
+}
+
+bool student_deserialize_topic(ucdrBuffer* reader, student* topic)
+{
+    bool success = true;
+
+        success &= ucdr_deserialize_string(reader, topic->name, 255);
+
+        success &= ucdr_deserialize_int32_t(reader, &topic->number);
+
+        success &= ucdr_deserialize_int32_t(reader, &topic->grade);
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            success &= ucdr_deserialize_string(reader, topic->hobby[i], 255);
+        }
+    return success && !reader->error;
+}
+
+uint32_t student_size_of_topic(const student* topic, uint32_t size)
+{
+    uint32_t previousSize = size;
+        size += ucdr_alignment(size, 4) + 4 + (uint32_t)strlen(topic->name) + 1;
+
+        size += ucdr_alignment(size, 4) + 4;
+
+        size += ucdr_alignment(size, 4) + 4;
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            size += ucdr_alignment(size, 4) + 4 + (uint32_t)strlen(topic->hobby[i]) + 1;
+        }
+    return size - previousSize;
+}
 
 namespace eprosima {
 namespace uxr {
@@ -895,9 +949,15 @@ bool FastDDSMiddleware::write_data(
         uint16_t datawriter_id,
         const std::vector<uint8_t>& data)
 {
-   bool rv = false;
-   auto it = datawriters_.find(datawriter_id);
-   if (datawriters_.end() != it)
+    bool rv = false;
+    auto it = datawriters_.find(datawriter_id);
+    ucdrBuffer buf;
+    student topic;
+    student_deserialize_topic(&buf,&topic);
+    printf("name: %s, number: %d, grade: %d hobby: %s %s %s"
+        ,topic.name, topic.number, topic.grade
+        ,topic.hobby[1],topic.hobby[1],topic.hobby[2]);
+    if (datawriters_.end() != it)
    {
        rv = it->second->write(data);
    }
diff --git a/src/cpp/middleware/fastdds/student.c b/src/cpp/middleware/fastdds/student.c
new file mode 100644
index 0000000..80ffbdc
--- /dev/null
+++ b/src/cpp/middleware/fastdds/student.c
@@ -0,0 +1,75 @@
+// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/*!
+ * @file student.c
+ * This source file contains the definition of the described types in the IDL file.
+ *
+ * This file was generated by the tool gen.
+ */
+
+#include "student.h"
+
+#include <ucdr/microcdr.h>
+#include <string.h>
+
+bool student_serialize_topic(ucdrBuffer* writer, const student* topic)
+{
+    bool success = true;
+
+        success &= ucdr_serialize_string(writer, topic->name);
+
+        success &= ucdr_serialize_int32_t(writer, topic->number);
+
+        success &= ucdr_serialize_int32_t(writer, topic->grade);
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            success &= ucdr_serialize_string(writer, topic->hobby[i]);
+        }
+    return success && !writer->error;
+}
+
+bool student_deserialize_topic(ucdrBuffer* reader, student* topic)
+{
+    bool success = true;
+
+        success &= ucdr_deserialize_string(reader, topic->name, 255);
+
+        success &= ucdr_deserialize_int32_t(reader, &topic->number);
+
+        success &= ucdr_deserialize_int32_t(reader, &topic->grade);
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            success &= ucdr_deserialize_string(reader, topic->hobby[i], 255);
+        }
+    return success && !reader->error;
+}
+
+uint32_t student_size_of_topic(const student* topic, uint32_t size)
+{
+    uint32_t previousSize = size;
+        size += ucdr_alignment(size, 4) + 4 + (uint32_t)strlen(topic->name) + 1;
+
+        size += ucdr_alignment(size, 4) + 4;
+
+        size += ucdr_alignment(size, 4) + 4;
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            size += ucdr_alignment(size, 4) + 4 + (uint32_t)strlen(topic->hobby[i]) + 1;
+        }
+    return size - previousSize;
+}
diff --git a/src/cpp/middleware/fastdds/student.h b/src/cpp/middleware/fastdds/student.h
new file mode 100644
index 0000000..c49014d
--- /dev/null
+++ b/src/cpp/middleware/fastdds/student.h
@@ -0,0 +1,58 @@
+// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/*!
+ * @file student.h
+ * This header file contains the declaration of the described types in the IDL file.
+ *
+ * This file was generated by the tool gen.
+ */
+
+#ifndef _student_H_
+#define _student_H_
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+#include <stdint.h>
+#include <stdbool.h>
+
+/*!
+ * @brief This struct represents the structure student defined by the user in the IDL file.
+ * @ingroup student
+ */
+typedef struct student
+{
+    char name[255];
+
+    int32_t number;
+    int32_t grade;
+    char hobby[3][255];
+
+} student;
+
+struct ucdrBuffer;
+
+bool student_serialize_topic(struct ucdrBuffer* writer, const student* topic);
+bool student_deserialize_topic(struct ucdrBuffer* reader, student* topic);
+uint32_t student_size_of_topic(const student* topic, uint32_t size);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // _student_H_
\ No newline at end of file
diff --git a/student.c b/student.c
new file mode 100644
index 0000000..80ffbdc
--- /dev/null
+++ b/student.c
@@ -0,0 +1,75 @@
+// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/*!
+ * @file student.c
+ * This source file contains the definition of the described types in the IDL file.
+ *
+ * This file was generated by the tool gen.
+ */
+
+#include "student.h"
+
+#include <ucdr/microcdr.h>
+#include <string.h>
+
+bool student_serialize_topic(ucdrBuffer* writer, const student* topic)
+{
+    bool success = true;
+
+        success &= ucdr_serialize_string(writer, topic->name);
+
+        success &= ucdr_serialize_int32_t(writer, topic->number);
+
+        success &= ucdr_serialize_int32_t(writer, topic->grade);
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            success &= ucdr_serialize_string(writer, topic->hobby[i]);
+        }
+    return success && !writer->error;
+}
+
+bool student_deserialize_topic(ucdrBuffer* reader, student* topic)
+{
+    bool success = true;
+
+        success &= ucdr_deserialize_string(reader, topic->name, 255);
+
+        success &= ucdr_deserialize_int32_t(reader, &topic->number);
+
+        success &= ucdr_deserialize_int32_t(reader, &topic->grade);
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            success &= ucdr_deserialize_string(reader, topic->hobby[i], 255);
+        }
+    return success && !reader->error;
+}
+
+uint32_t student_size_of_topic(const student* topic, uint32_t size)
+{
+    uint32_t previousSize = size;
+        size += ucdr_alignment(size, 4) + 4 + (uint32_t)strlen(topic->name) + 1;
+
+        size += ucdr_alignment(size, 4) + 4;
+
+        size += ucdr_alignment(size, 4) + 4;
+
+        for(size_t i = 0; i < sizeof(topic->hobby) / 255; ++i)
+        {
+            size += ucdr_alignment(size, 4) + 4 + (uint32_t)strlen(topic->hobby[i]) + 1;
+        }
+    return size - previousSize;
+}
diff --git a/student.h b/student.h
new file mode 100644
index 0000000..c49014d
--- /dev/null
+++ b/student.h
@@ -0,0 +1,58 @@
+// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+/*!
+ * @file student.h
+ * This header file contains the declaration of the described types in the IDL file.
+ *
+ * This file was generated by the tool gen.
+ */
+
+#ifndef _student_H_
+#define _student_H_
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+#include <stdint.h>
+#include <stdbool.h>
+
+/*!
+ * @brief This struct represents the structure student defined by the user in the IDL file.
+ * @ingroup student
+ */
+typedef struct student
+{
+    char name[255];
+
+    int32_t number;
+    int32_t grade;
+    char hobby[3][255];
+
+} student;
+
+struct ucdrBuffer;
+
+bool student_serialize_topic(struct ucdrBuffer* writer, const student* topic);
+bool student_deserialize_topic(struct ucdrBuffer* reader, student* topic);
+uint32_t student_size_of_topic(const student* topic, uint32_t size);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // _student_H_
\ No newline at end of file
diff --git a/student.idl b/student.idl
new file mode 100644
index 0000000..04f7a1f
--- /dev/null
+++ b/student.idl
@@ -0,0 +1,6 @@
+struct student{
+    string name;
+    long number;
+    long grade;
+    string hobby[3];
+};
diff --git a/student23.h b/student23.h
new file mode 100644
index 0000000..1b12fad
--- /dev/null
+++ b/student23.h
@@ -0,0 +1,8 @@
+#include<string>
+using namespace std;
+struct student{
+    string name;
+    long number;
+    long grade;
+    string hobby[3];
+};
-- 
2.34.1

